{"version":3,"sources":["svg/hammy.png","api/quizQuestions.js","api/petSpecies.js","components/Question.js","components/QuestionCount.js","components/AnswerOption.js","components/Quiz.js","components/ResultOption.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","quizQuestions","question","prefer","category","answers","type","content","req","petSpecies","class","generic","social","space","cost","effort","species","picUrl","Question","props","react_default","a","createElement","className","QuestionCount","counter","total","AnswerOption","name","checked","answerType","answer","id","value","disabled","onChange","onAnswerSelected","htmlFor","answerContent","Quiz","react_transition_group","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","components_QuestionCount","questionTotal","components_Question","answerOptions","map","components_AnswerOption","quizResult","src","alt","Result","quizResultOptions","ResultOption","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","answersCount","result","resultSpecies","handleAnswerSelected","bind","assertThisInitialized","setState","event","_this2","setUserAnswer","currentTarget","length","setTimeout","setNextQuestion","setResults","getResults","cat","objectSpread","defineProperty","spaceW","costW","socialW","effortW","isNaN","i","keys","classSpaceV","classCostV","classSocialV","classEffortV","newLen","j","petObj","sort","b","sortedKey","components_Quiz","components_Result","logo","renderResult","renderQuiz","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba67cdaf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hammy.8928fff4.png\";","\nvar req = \"Requirement: \"\nvar prefer = \"Trait: \"\n\n        // future: config page... \n        //Would you like to get specific or generic quiz results?\n        // all questions on one page... use of checkbox\nvar quizQuestions = [\n    {\n        question: prefer+\"How interactive you want pet to be?\",\n        category: \"social\",\n        // how many results to display?\n        answers: [\n            {\n                type: 5,\n                content: \"As much as possible\"\n            },\n            {\n                type: 4,\n                content: \"High\"\n            },\n            \n            {\n              type: 3,\n              content: \"Average\"\n          },\n          {\n              type: 2,\n              content: \"Low\"\n          },\n          {\n              type: 1,\n              content: \"Minimal\"\n          },\n        ]\n    },\n  {\n      question: req+\"How much space do you have available for pet?\",\n      category: \"space\",\n      // how many results to display?\n      answers: [\n          {\n              type: 5,\n              content: \"Large space\"\n          },\n          {\n              type: 4,\n              content: \"High\"\n          },\n          \n          {\n            type: 3,\n            content: \"Average\"\n        },\n        {\n            type: 2,\n            content: \"Low\"\n        },\n        {\n            type: 1,\n            content: \"No space\"\n        },\n      ]\n  },\n  // do you prefer: mammal, rodent, fish, or bird\n  // temp: how social, interactive, spacial, maintenance : Must-have, high, medium, low, very low\n  // future: \n    // question type: checkbox -> enter number for each category\n    //skill point or bar like ...\n/*\n  {\n      question: req+\"What's your budget preference for pet?\",\n      category: \"cost\",\n      answers: [\n        {\n            type: 5,\n            content: \"$200+\"\n        },\n        {\n            type: 4,\n            content: \"$200\"\n        },\n        \n        {\n          type: 3,\n          content: \"$100\"\n      },\n      {\n          type: 2,\n          content: \"$50\"\n      },\n      {\n          type: 1,\n          content: \"Less than $50\"\n      },\n      ]\n  },\n  */\n];\n\nexport default quizQuestions;\n","\n/*\ntraits: social\n    1 = minimal, 10 = has lots\nrequirements: space, cost, effort\n    1 = lots needed, 10 = minimal requirement\n\n*/\nvar petSpecies = [\n  {\n      class: \"Dog\",\n      generic: {\n        social: 8,\n        space: 3,\n        cost: 2,\n        effort: 1\n    },\n      species: [\n          {\n              type: \"Husky\",\n              social: 10,\n              space: 1,\n              cost: 1,\n              effort: 1\n\n          },\n          {\n              type: \"Golden Retreiver\",\n              social: 9,\n              space: 3,\n              cost: 1,\n              effort: 1\n          },\n          {\n              type: \"Chihuahua\",\n              social: 7,\n              space: 6,\n              cost: 3,\n              effort: 4\n          }\n      ]\n  },\n  {\n    class: \"Rodent\",\n    generic: {\n        social: 4,\n        space: 8,\n        cost: 7,\n        effort: 8\n    },\n    species: [\n        {\n            type: \"Syrian Hamster\",\n            social: 4,\n            space: 8,\n            cost: 9,\n            effort: 8\n\n        } ,\n        {\n            type: \"Chinchilla\",\n            social: 6,\n            space: 7,\n            cost: 5,\n            effort: 6\n        } \n    ]\n},\n  {\n    class: \"Fish\",\n    generic: {\n        social: 1,\n        space: 8,\n        cost: 8,\n        effort: 8\n    },\n    species: [\n        {\n            type: \"Goldfish\",\n            picUrl: \"goldfish.jpg\",\n            social: 1,\n            space: 9,\n            cost: 9,\n            effort: 9\n        },\n    ]\n},\n{\n    class: \"Bird\",\n    generic: {\n        social: 5,\n        space: 7,\n        cost: 7,\n        effort: 7\n    },\n    species: [\n        {\n            type: \"Bulgie\",\n            social: 5,\n            space: 7,\n            cost: 7,\n            effort: 6\n        },\n    ]\n},\n];\n\nexport default petSpecies;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n  return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      Question <span>{props.counter}</span> of <span>{props.total}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction AnswerOption(props) {\n  return (\n    <li className=\"answerOption\">\n      <input\n        type=\"radio\"\n        className=\"radioCustomButton\"\n        name=\"radioGroup\"\n\n        // category?\n        // ans  type roght\n        checked={props.answerType === props.answer}\n        id={props.answerType}\n        value={props.answerType}\n       // category={props.category}\n        disabled={props.answer}\n        onChange={props.onAnswerSelected}\n      />\n      <label className=\"radioCustomLabel\" htmlFor={props.answerType}>\n        {props.answerContent}\n      </label>\n    </li>\n  );\n}\n\nAnswerOption.propTypes = {\n  answerType: PropTypes.string.isRequired,\n  answerContent: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n  category: PropTypes.string.isRequired\n};\n\nexport default AnswerOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nfunction Quiz(props) {\n  function renderAnswerOptions(key) {\n    return (\n      <AnswerOption\n        key={key.content}\n        answerContent={key.content}\n        answerType={key.type}\n        answer={props.answer}\n        category={props.category}\n        questionId={props.questionId}\n        onAnswerSelected={props.onAnswerSelected}\n      />\n    );\n  }\n\n  return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={props.questionId}>\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\n        <Question content={props.question} />\n        <ul className=\"answerOptions\">\n          {props.answerOptions.map(renderAnswerOptions)}\n        </ul>\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  answerOptions: PropTypes.array.isRequired,\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired\n};\n\nexport default Quiz;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//const images = require.context('../..src/resources', true);\r\n\r\nfunction AnswerOption(props) {\r\n  return (\r\n    <li className=\"answerOption\">\r\n      \r\n      <div>\r\n        You prefer <strong>{props.quizResult}</strong>!\r\n        \r\n        Pet score is: temp\r\n      </div>\r\n      <div>\r\n            <img src=\"./src/resources/goldfish.jpg\" alt={props.quizResult } />\r\n      </div>\r\n\r\n\r\n      <br></br>\r\n    </li>\r\n  );\r\n}\r\n\r\nAnswerOption.propTypes = {\r\n  quizResult: PropTypes.string.isRequired,\r\n // quizResultImage: PropTypes.string.isRequired, \r\n};\r\n\r\nexport default AnswerOption;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nimport ResultOption from '../components/ResultOption';\nfunction Result(props) {\n\n  function renderResultOptions(key) {\n    //alert(\"result option: \" + key.content);\n   return( <ResultOption\n        key={key}\n        quizResult={key} \n      />\n      );\n  }\n  return (\n    <CSSTransitionGroup\n      className=\"container result\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n\n      \n     \n\n      \n      \n    \n      <ul className=\"resultOptions\">\n         \n         {props.quizResultOptions.map(renderResultOptions)}\n    </ul>\n \n\n      \n    </CSSTransitionGroup>\n  );\n}\n// {props.answerOptions.map(renderAnswerOptions)}\n    \n\n/*\n<div>\n        You prefer <strong>{props.quizResult}</strong>!\n      </div>\n      <div>\n            <img src={props.quizResultImage} alt={props.quizResult } />\n      </div>\n*/\n/*\n\n      <ul className=\"resultOptions\">\n         <strong>{props.quizResultOptions}</strong>!\n    </ul>\n \n      */\n\nResult.propTypes = {\n  //quizResult: PropTypes.array.isRequired, \n  \n  //ratio: PropTypes.number.isRequired,\n  quizResultOptions: PropTypes.array.isRequired,\n};\n\nexport default Result;\n","import React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport petSpecies from './api/petSpecies';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\n//import logo from './svg/logo.svg';\nimport logo from './svg/hammy.png';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      category: '',\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: [],\n      //result: '',\n\n      \n      resultSpecies: {}\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    \n    /*(const shuffledAnswerOptions = quizQuestions.map(question =>\n      this.shuffleArray(question.answers)\n    );*/\n    \n    this.setState({\n      category: quizQuestions[0].category,\n      question: quizQuestions[0].question,\n      answerOptions: quizQuestions[0].answers//shuffledAnswerOptions[0]\n    });\n    \n  }\n/*\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }*/\n\n  handleAnswerSelected(event) {\n    //alert(\"old answer value\" + this.state.answer)\n    this.setUserAnswer(event.currentTarget.value);\n\n    //alert(\"new answer value\" + this.state.answer)\n    //this.setUserAnswer(this.state.questionId, quizQuestions.length);\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n\n  }\n\n  // iterate through all petSpecies and add weighted val...\n  // store each weighted val from quizQ...\n  setUserAnswer(answer) {\n      \n    var cat = this.state.category;\n    this.setState((state, props) => ({\n      answersCount: {\n        ...state.answersCount,\n        // [cat]: is the thing to store into.... right side os the value thats stored\n         [cat]: (state.answersCount[cat] || 0) + answer\n      },\n      //category: cat,\n      answer: answer-0\n    })); \n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: '',\n      category: quizQuestions[counter].category,\n    });\n  }\n\n  getResults() {\n\n    const answersCount = this.state.answersCount;\n    const resultSpecies = this.state.resultSpecies;\n\n    var spaceW = answersCount[\"space\"];\n    var costW = answersCount[\"cost\"];\n    var socialW = answersCount[\"social\"];\n    var effortW = answersCount[\"effort\"];\n\n    if(isNaN(spaceW) ) spaceW = 0;\n    if(isNaN(costW) ) costW = 0;\n    if(isNaN(socialW) ) socialW = 0;\n    if(isNaN(effortW) ) effortW = 0;\n    \n    //alert(\"space\"+spaceW + \"cost\" + costW);\n\n    for(var i = 0; i < Object.keys(petSpecies).length; i++ ){\n      //if(generic)\n      //  resultSpecies\n     // else \n     // add social, effort  \n      \n\n    //REENABLE AFTER CONFIG PAGE\n      var classSpaceV = spaceW*petSpecies[i].generic.space ;\n      var classCostV =  costW*petSpecies[i].generic.cost  ;\n      var classSocialV=  socialW*petSpecies[i].generic.social  ; \n      var classEffortV=  effortW*petSpecies[i].generic.effort  ;\n      /* \n       resultSpecies[petSpecies[i].class] =  \n        classSpaceV + classCostV + classSocialV + classEffortV;\n\n        //alert(\"space2\" + classSpaceV + \" cost2\" + classCostV + \" social2:\"  +classSocialV + \"effort 2\" +classEffortV + \" sum: \"  + resultSpecies[petSpecies[i].class]);\n      \n        */\n       var newLen = Object.keys((petSpecies[i].species)).length;\n     // alert(Object.keys(petSpecies[0].species) + \"...\"+ petSpecies[2] + \"...\" +(newLen)); \n      // WTF jsut 0, 1 , 2, 3\n\n    //alert(petSpecies[i].class +\"..\"+ classCostV + \"..\" + classSpaceV); \n        for(var j = 0; j < newLen; j++ ){\n      \n          var petObj = petSpecies[i].species[j];\n       classSpaceV = spaceW*petObj.space  ;\n       classCostV =  costW*petObj.cost  ;\n       classSocialV =  socialW*petObj.cost  ;\n       classEffortV =  effortW*petObj.cost  ;\n        resultSpecies[petObj.type] = \n          classSpaceV + classCostV + classSocialV + classEffortV;\n \n      }\n    }\n    \n    //alert(\"presorted \" +  resultSpecies);\n    var mappedHash = Object.keys( resultSpecies ).sort(function( a, b ) {\n      return resultSpecies[ b ] - resultSpecies[ a ];\n      }).map(function( sortedKey ) {\n          return sortedKey;\n      });\n      // alert( \"post sorted \"+ mappedHash);\n    \nreturn mappedHash;\n\n\n\n    //alert(  resultSpecies[\"Husky\"]);\n    /*\n    const resultSpeciesKeys = Object.keys(resultSpecies);\n\n    // SORT RESULTS.. AND get all i need?\n    \n    //alert( resultSpeciesKeys);\n\n\n    const resultSpeciesValues = resultSpeciesKeys.map(key => resultSpecies[key]);\n    const maxResultSpecies = Math.max.apply(null, resultSpeciesValues);\n\n    return resultSpeciesKeys.filter(key => resultSpecies[key] === maxResultSpecies);*/\n/*\n    alert(\"????\" + Object.keys(resultSpeciesKeys));\n    resultSpeciesKeys.sort();\n\n    \n    alert(\"????\" + Object.keys(resultSpeciesKeys));\n\n    return resultSpeciesKeys;*/\n  }\n\n  // array???\n  // pass imaged path??? in massive DS\n\n  setResults(result) {\n    \n    //alert(\"res\"+result[0] +\"..\"+ result[1] + \"..\" +result[2]);\n    if (result.length >= 1) {\n      this.setState({ result: result });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        category={this.state.category}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        // FUNCTION AS PROP\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderResult() {\n\n    //alert(\"res wtf\"  );\n    // sort\n    //return <Result quizResult={this.state.result} />;\n    return <Result quizResultOptions={this.state.result} />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2>Pet Sorting Hat</h2>\n        </div>\n        {this.state.result.length>= 1 ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}